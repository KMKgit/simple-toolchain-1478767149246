{"changed":true,"filter":false,"title":"server.js","tooltip":"/server.js","value":"require('console-stamp')(console, '[HH:MM:ss.l]');\nvar express = require('express');\nvar http = require('http');\nvar fs = require('fs');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar session = require('express-session');\nvar MongoStore = require('connect-mongo')(session);\nvar MongoClient = require('mongodb').MongoClient;\nvar bcrypt = require('bcrypt');\nvar jade = require('jade');\nvar url = require('url');\nvar async = require('async');\nvar passport = require('passport');\nvar util = require('util');\nvar helmet = require('helmet');\nvar csvParse = require('csv-parse');\nvar execFile = require('child_process').execFile;\nvar execFileSync = require('child_process').execFileSync;\nvar randtoken = require('rand-token');\nvar formidable = require('formidable');\nvar login = require('connect-ensure-login');\nvar ZolgwaStrategy = require('passport-zolgwa');\nvar CMD = require('./js/common-const').cmd;\n\n\nvar GLOBAL = {\n  serverAddress: 'http://164.125.70.62',\n  serverPort: 8080,\n  mongoStoreOptions: {\n    ttl: 60 * 60 * 24 * 7,\n    autoRemove: true,\n    url: 'mongodb://localhost:27017/zolgwa'\n  },\n  APIKEY_LENGTH: 16, \n  CSV_ROOT: __dirname + /csv/,\n  db: null\n};\n\n\n\nvar DB_NAME = {\n  SESSION: 'zolgwa',\n  REALDB: 'zoldata' \n};\n\nvar TABLE_NAME = {\n  USER: 'user2',\n  TRAIN_DATA: 'train_data',\n  TRAIN_OUTPUT: 'train_output',\n  API: 'api'\n};\n\nvar ACCEPTED_EMAIL = ['@gmail.com'];\nvar mongoUrl = 'mongodb://localhost:27017/zoldata2';\n\nvar app = express();\nvar server = http.createServer(app);\n\nfunction printError(err) {\n  return console.error(err);\n}\n\nfunction printRequestLog(request) {\n  return console.log(request.method, request.originalUrl);\n}\n\nfunction cryptPassword(password, callback) {\n  bcrypt.genSalt(10, function(err, salt) {\n    if (err) \n      return callback(err);\n    bcrypt.hash(password, salt, function(err, hash) {\n      return callback(err, hash);\n    });\n  });\n}\n\n// function comparePassword(password, userPassword, callback) {\n//   bcrypt.compare(password, userPassword, function(err, isPasswordMatch) {\n//     if (err)\n//       return callback(err);\n//     return callback(null, isPasswordMatch);\n//   });\n// }\n\nfunction jadeRead(res, p, varlist) {\n  var fn = jade.compileFile(__dirname + p, {\n      basedir: __dirname\n  });\n  res.writeHead(200, {'Content-Type': 'text/html'});\n  res.end(fn(varlist));\n}\n\nfunction dateFormat(data) {\n  var len = data.length;\n  function mask(x) {\n    x = x.toString();\n    if (x.length <= 1) return '0' + x;\n    return x;\n  }\n  for (var i = 0; i < len; ++i) {\n    var date = new Date(data[i].write_time);    \n    data[i].write_time = util.format(\"%s-%s-%s %s:%s\",\n        date.getFullYear(),\n        mask(date.getMonth() + 1),\n        mask(date.getDay()),\n        mask(date.getHours()),\n        mask(date.getMinutes()));\n  }\n  return data;\n}\n\npassport.use('oauth2', new ZolgwaStrategy({\n    authorizationURL: 'http://164.125.70.62:3000/auth',\n    tokenURL: 'http://164.125.70.62:3000/token',\n    clientID: '123-456-789',\n    clientSecret: 'shhh-its-a-secret',\n    callbackURL: 'http://164.125.70.62:8080/oauth2/callback',\n    profileURL: 'http://164.125.70.62:3000/api/me',\n    passReqToCallback: true\n  },\n  function(req, accessToken, refreshToken, profile, done) {\n    console.log('get access_token');\n    console.log('access_token: ', accessToken);\n    GLOBAL.db.collection(TABLE_NAME.USER).findOne({\n      id: profile.id,\n    }, function(err, doc) { \n      if (err) return done(err);\n      if (doc) {\n        doc.access_token = accessToken;\n        return done(null, doc); \n      } else {\n        GLOBAL.db.collection(TABLE_NAME.USER).insertOne({\n          id: profile.id,\n          email: profile.email\n        }, function(err, doc) {\n          if (err) return done(err);\n          doc.access_token = accessToken;\n          return done(null, doc);\n        });\n      }\n    });\n  }\n));\n\npassport.serializeUser(function(user, done) {\n  console.log('serialize user');\n  console.log('User: ', user);\n  return done(null, user);  \n});\n\npassport.deserializeUser(function(profile, done) {\n  console.log('deserialize user');\n  console.log('Profile: ' , profile);\n  GLOBAL.db.collection(TABLE_NAME.USER).findOne({id: profile.id}, function(err, doc) {\n    if (err) return printError(err);\n    return done(err, doc);\n  });\n});\n\napp.use(helmet());\napp.use(express.static(__dirname));\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({limit: '50mb', extended: true}));\napp.use(bodyParser.json({limit: '50mb'}));\n\napp.use(session({\n  domain: '.app.localhost',\n  secret: 'zolgwa',\n  saveUninitialized: false,\n  resave: false,\n  store: new MongoStore(GLOBAL.mongoStoreOptions)\n}));\n\napp.use(function(req, res, next) {\n  res.header('Access-Control-Allow-Credentials', true);\n  res.header('Access-Control-Allow-Origin', req.headers.origin);\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n  res.header('Access-Control-Allow-Headers', 'X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept');\n  if ('OPTIONS' == req.method) {\n    res.send(200);\n  } else {\n    next();\n  }\n});\napp.use(passport.initialize());\napp.use(passport.session());\n\n\napp.all('/*', function(req, res, next) {\n  printRequestLog(req);\n  next();\n});\napp.get('/', function(req, res, next) {\n  if (!req.user) {\n    return jadeRead(res, '/jade/index.jade', {});\n  } else {\n    var id = req.user.id; \n    async.parallel([\n      function countTrue(callback) {\n        GLOBAL.db.collection(TABLE_NAME.API).find({user_id: id, valid: 1}).count(function(err, count) {\n          if (err) {\n            printError(err);\n            return jadeRead(res, '/jade/index.jade', {\n              user: req.user\n            });\n          }\n          return callback(null, count);\n        });\n      },\n      function countFalse(callback) {\n        GLOBAL.db.collection(TABLE_NAME.API).find({user_id: id, valid: 0}).count(function(err, count) {\n          if (err) {\n            printError(err);\n            return jadeRead(res, '/jade/index.jade', {\n              user: req.user\n            });\n          }\n          return callback(null, count);\n        });\n      },\n      function countErr(callback) {\n        GLOBAL.db.collection(TABLE_NAME.API).find({user_id: id, valid: -1}).count(function(err, count) {\n          if (err) {\n            printError(err);\n            return jadeRead(res, '/jade/index.jade', {\n              user: req.user\n            });\n          }\n          return callback(null, count);\n        });\n      }\n    ],\n    function done(err, results) {\n      if (err) {\n        printError(err);\n        return jadeRead(res, '/jade/index.jade', {\n          user: req.user\n        });\n      }\n      return jadeRead(res, '/jade/index.jade', {\n        user: req.user,\n        successCount: results[0],\n        learningCount: results[1],\n        errCount: results[2]\n      });\n    });\n  }\n});\n\napp.get('/oauth2/callback',\n  passport.authenticate('oauth2', {failureRedirect: '/'}),\n  function(req, res, next) {\n    return res.redirect('/');\n  });\n\napp.get('/signup', login.ensureLoggedOut(), function(req, res, next) {\n  if(req.user) return res.redirect('/');\n  return jadeRead(res, '/jade/signup.jade', {\n  });\n});\n\napp.get('/logout', login.ensureLoggedIn(), function(req, res, next) {\n  console.log(\"LOGOUT\");\n  req.logout();\n  res.redirect('/');\n});\n\napp.get('/createapi', login.ensureLoggedIn(),\n  function(req, res, next) { \n    // if (!req.user) return res.redirect('/');\n    return jadeRead(res, '/jade/createapi.jade', {\n      user: req.user\n    });\n  });\n\napp.get('/errapi', login.ensureLoggedIn(), function (req, res, next) {\n  if (!req.user) return res.redirect('/');\n  \n  GLOBAL.db.collection(TABLE_NAME.API).find({user_id: req.user.id, valid:-1}).toArray(function(err, doc) {\n    if (err) return printError(err);\n    \n    var ENTRY_PER_PAGE = 10;\n    var maxPage = Math.max(1, Math.floor((doc.length - 1) / ENTRY_PER_PAGE + 1));\n    console.log(maxPage);\n    return jadeRead(res, '/jade/errapi.jade', {\n      user: req.user,\n      //errapis: dateFormat(doc),\n      errapis: 0,\n      maxPage: maxPage\n    });\n  }); \n});\n\napp.get('/successapi', login.ensureLoggedIn(), function(req, res, next) {\n  if (!req.user) return res.redirect('/');\n  \n  GLOBAL.db.collection(TABLE_NAME.API).find({user_id: req.user.id, valid:1}).toArray(function(err, doc) {\n    if (err) return printError(err);\n    \n    var ENTRY_PER_PAGE = 10;\n    var maxPage = Math.max(1, Math.floor((doc.length - 1) / ENTRY_PER_PAGE + 1)); \n    console.log(maxPage);\n    return jadeRead(res, '/jade/successapi.jade', {\n      user: req.user,\n      successapis: dateFormat(doc),\n      maxPage: maxPage\n    });\n  }); \n});\n\napp.get('/learningapi', login.ensureLoggedIn(), function(req, res, next) {\n  if (!req.user) return res.redirect('/');\n  \n  GLOBAL.db.collection(TABLE_NAME.API).find({user_id: req.user.id, valid:0}).toArray(function(err, doc) {\n    if (err) return printError(err);\n    console.log(doc)\n    var ENTRY_PER_PAGE = 10;\n    var maxPage = Math.max(1, Math.floor((doc.length - 1) / ENTRY_PER_PAGE + 1)); \n    console.log(maxPage);\n    return jadeRead(res, '/jade/learningapi.jade', {\n      user: req.user,\n      learningapis: dateFormat(doc),\n      maxPage: maxPage\n    });\n  }); \n});\n\napp.get('/myapi', login.ensureLoggedIn(), function(req, res, next) {\n  if (!req.user) return res.redirect('/');\n  \n  GLOBAL.db.collection(TABLE_NAME.API).find({user_id: req.user.id}).toArray(function(err, doc) {\n    if (err) return printError(err);\n    \n    var ENTRY_PER_PAGE = 10;\n    var maxPage = Math.max(1, Math.floor((doc.length - 1) / ENTRY_PER_PAGE + 1)); \n    console.log(maxPage);\n    return jadeRead(res, '/jade/myapi.jade', {\n      user: req.user,\n      myapis: dateFormat(doc),\n      maxPage: maxPage\n    });\n  }); \n});\n\napp.get('/api', login.ensureLoggedIn(), function(req, res, next) {\n  if (!req.user) res.redirect('/');\n  \n  var aid = req.query.aid;\n  if (!aid) return res.redirect('/myapi');\n  GLOBAL.db.collection(TABLE_NAME.API).findOne({api_key: aid}, function(err, doc) {\n    if (err || !doc) {\n      return res.redirect('/')  ;\n    }\n    console.log(doc);\n  \n    return jadeRead(res, '/jade/api.jade', {\n      user: req.user,\n      api: doc\n    });\n  });\n});\n\napp.get('/api/info', login.ensureLoggedIn(), function(req, res, next) {\n  \n  var aid = req.query.aid;\n  if (!aid) return res.redirect('/myapi');\n  GLOBAL.db.collection(TABLE_NAME.API).findOne({\n    api_key: aid\n  }, function(err, doc) {\n    if (err) {\n      return res.send(err);\n    }\n    return res.send(doc.params);\n  });\n});\n\napp.get('/api/err', login.ensureLoggedIn(), function(req, res, next) {\n  var aid = req.query.aid;\n  if (!aid) return res.redirect('/myapi');\n  GLOBAL.db.collection(TABLE_NAME.API).findOne({\n    api_key: aid\n  }, function(err, doc) {\n    if (err) {\n      return res.send(err);\n    }\n    return res.json({\n      err: doc.err\n    });\n  });\n});\n\n\n\napp.get('/login',\n  passport.authenticate('oauth2')\n);\n\napp.post('/api/info', login.ensureLoggedIn(), function(req, res, next) {\n  if (!req.user) {\n    return res.redirect('/');\n  }\n  \n  var body = req.body;\n  GLOBAL.db.collection(TABLE_NAME.API).findOne({api_key: body.apiKey}, function(err, doc) {\n    if (err) {\n      printError(err);\n      return res.json({\n        err: err\n      });\n    }\n    return res.json({\n      doc: doc\n    });\n  });\n});\n\napp.post('/test_upload', login.ensureLoggedIn(), function(req, res, next) {\n  if (!req.user) res.redirect('/');\n  \n  var form = new formidable.IncomingForm();\n  form.encoding = 'utf-8';\n  form.uploadDir = __dirname + '/csv/';\n  \n  var randomApikey = randtoken.uid(GLOBAL.APIKEY_LENGTH);\n  var body = {};\n  form.parse(req);\n  form.on('progress', function(bytesReceived, bytesExpected) { \n    console.log(bytesReceived, bytesExpected);\n  });\n  form.on('field', function(name, value) {\n    body[name] = JSON.parse(value);\n    console.log(name, util.inspect(value));\n  });\n  \n  form.on('fileBegin', function(name, value) {\n    console.log('filebegin');\n    execFileSync('mkdir', ['-p', __dirname + '/data/' + randomApikey]);\n    execFileSync('mkdir', ['-p', __dirname + '/data/' + randomApikey + '/test']);\n    execFileSync('mkdir', ['-p', __dirname + '/data/' + randomApikey + '/request']);\n    value.path = __dirname + '/data/' + randomApikey + '/' + randomApikey + '.csv';\n    value.type = 'text/csv';\n  }); \n  \n  form.on('file', function(name, value) {\n  });\n   \n  form.on('error', function(err) {\n    console.log(err);\n  });\n  \n  form.on('aborted', function() {\n    console.log('aborted');\n  });\n  \n  form.on('end', function() {\n    console.log(body);\n    var columnsWithTypes = body.columns.map(function(val, idx) {\n      return {column: body.columns[idx], types: body.types[idx]};\n    });\n    fs.writeFileSync(__dirname + '/data/' + randomApikey + '/' + randomApikey + '.info', JSON.stringify(columnsWithTypes));\n    fs.writeFileSync(__dirname + '/data/' + randomApikey + '/' + randomApikey + '.param', JSON.stringify(body.params));\n    console.log('end');\n    var newData = {\n      user_id: req.user.id,\n      api_key: randomApikey,\n      api_name: body.apiName,\n      valid: 0,\n      method: body.method,\n      write_time: body.writeTime,\n      params: body.params,\n      err: ''\n    };\n    GLOBAL.db.collection(TABLE_NAME.API).insertOne(newData, function(err, doc) {\n      if (err) {\n        console.log(err);\n        return res.json({\n          err: err\n        });\n      }\n      var exePy = CMD[body.method];\n      var exeParam = [__dirname + '/py/' + exePy + '/' + exePy + '.py'];\n      exeParam.push(randomApikey);\n      execFile('python', exeParam, function(err, stdout, stderr) {\n        if (err) {\n          return printError(err);  \n        }\n        console.log('stdout', stdout);\n        console.log('stderr', stderr);\n        if (stderr) {\n          GLOBAL.db.collection(TABLE_NAME.API).updateOne({api_key: randomApikey},\n            {$set:{valid:-1, err: stderr}}, function(err, doc) {\n            if (err) {\n              return printError(err);\n            }       \n          });     \n        } else {\n          GLOBAL.db.collection(TABLE_NAME.API).updateOne({api_key: randomApikey}, {$set:{valid: 1}}, function(err, doc) {\n            if (err) {\n              return printError(err);\n            } \n          });\n        }\n      });\n    });\n    return res.json({\n      message: 'end'\n    });\n  });\n});945678,l;\n\napp.post('/test', login.ensureLoggedIn(), function(req, res, next) {\n  if (!req.user) return res.redirect('/');\n  \n  var form = new formidable.IncomingForm();\n  form.encoding = 'utf-8';\n  form.uploadDir = __dirname + '/csv/';\n  \n  var randomTestNumber = randtoken.uid(GLOBAL.APIKEY_LENGTH);\n  var body = {};\n  form.parse(req);\n  form.on('progress', function(bytesReceived, bytesExpected) { \n    console.log(bytesReceived, bytesExpected);\n  });\n  form.on('field', function(name, value) {\n    body[name] = JSON.parse(value);\n    console.log(name, util.inspect(value));\n  });\n  \n  form.on('fileBegin', function(name, value) {\n    execFileSync('mkdir', ['-p', __dirname + '/data/' + body.apiKey + '/test']);\n    value.path = __dirname + '/data/' + body.apiKey + '/test/' + randomTestNumber + '.csv';\n    value.type = 'text/csv';\n    console.log('filebegin');\n  }); \n  \n  form.on('file', function(name, value) {\n  });\n   \n  form.on('error', function(err) {\n    console.log(err);\n  });\n  \n  form.on('aborted', function() {\n    console.log('aborted');\n  });\n  \n  form.on('end', function() {\n    async.waterfall([\n      function(done) {\n        GLOBAL.db.collection(TABLE_NAME.API).findOne({api_key: body.apiKey},\n            function(err, doc) {\n          if (err) {\n            console.error(err);\n            return res.json({\n              err: err  \n            });\n          }      \n          done(null);\n        });\n      },\n      function(done) {\n        console.log(body);\n        if (body.columns) {\n          var columnsWithTypes = body.columns.map(function(val, idx) {\n            return body.columns[idx] + '\\n' + body.types[idx];      \n          });\n          var columnsInfo = columnsWithTypes.join('\\n');\n          fs.writeFileSync(__dirname + '/data/' + body.apiKey + '/test/' + randomTestNumber + '.info', columnsInfo);\n        }\n        if (body.params)\n          fs.writeFileSync(__dirname + '/data/' + body.apiKey + '/test/' + randomTestNumber + '.param', JSON.stringify(body.params));\n        \n        console.log('end');\n        var exePy = CMD[body.method];\n        var exeParam = [__dirname + '/py/' + exePy + '/test_' + exePy + '.py'];\n        exeParam.push(body.apiKey);\n        exeParam.push(randomTestNumber);\n        execFile('python', exeParam, function(err, stdout, stderr) {\n          console.log(err); \n          console.log(stdout);\n          console.log(stderr);\n          \n          fs.readFile(__dirname + '/data/' + body.apiKey + '/test/' + randomTestNumber + '.test', 'utf-8', function(err, result) {\n            if (err) {\n              printError(err);\n              return res.json({\n                err: err\n              });\n            }\n            console.log(result);\n            return res.json({\n              data: result\n            });\n          });\n        });\n      }\n    ]);\n  });\n});\n\n\napp.post('/run', function(req, res, next) {\n  var body = req.body;\n  console.log(body);\n  var exePy = CMD[body.method];\n  if (!exePy) {\n    return res.json({\n      err: '지원하지 않는 method입니다.'  \n    });\n  }\n\n  var randNum = randtoken.uid(GLOBAL.APIKEY_LENGTH);\n  var inp = body.inp;\n  var keys = [];\n  var values = [];\n  for (var key in inp) {\n    keys.push(key);\n    values.push(inp[key]);\n  }\n  \n  var inpStr = keys.join(',') + '\\n' + values.join(',');\n  console.log(inpStr);\n  fs.writeFile(__dirname + '/data/' + body.apiKey + '/request/' + randNum + '.csv', inpStr, 'utf-8', function(err, result) {\n    if (err) {\n      printError(err);\n      return res.json({\n        err: err\n      });\n    }      \n    var exeParam = [__dirname + '/py/' + exePy + '/request_' + exePy + '.py', body.apiKey, randNum];\n    exeParam.push(randNum);\n    execFile('python', exeParam, function(err, stdout, stderr) {\n      console.log(err);\n      console.log(stdout);\n      console.log(stderr);\n      if (stderr) {\n        return res.json({\n          err: stderr\n        });\n      }\n      fs.readFile(__dirname + '/data/' + body.apiKey + '/request/' + randNum + '.req', 'utf-8', function(err, result) {\n        if (err) {\n          return res.json({\n            err: err\n          });\n        }\n        return res.json({\n          data: result\n        });\n      });\n    });\n  });\n});\n\napp.post('/remove', login.ensureLoggedIn(), function(req, res, next) {\n  if (!req.user) {\n    return res.redirect('/');\n  }\n\n  var list = req.body.rmList;\n  \n  async.each(list, function(apiKey, callback) {\n    GLOBAL.db.collection(TABLE_NAME.API).remove({api_key: apiKey}, function(err, n) {\n      if (err) {\n        printError(err);\n        return res.json({\n          err: err\n        });\n      }\n      execFile('rm', ['-f', apiKey + '.*'], function(err, stdout, stderr) {\n        if (err) {\n          printError(err);\n          return res.json({\n            err: err\n          });\n        }\n        return callback(null);\n      });\n    });\n  },\n  function(err) {\n    if (err) {\n      return res.json({\n        err: err\n      });\n    }\n    \n    return res.json({\n      success: true\n    });\n  });\n});\n\napp.post('/search', login.ensureLoggedIn(), function(req, res, next) {\n  var body = req.body;\n  if (!req.user) {\n    return res.redirect('/');\n  }\n  \n  function getFailureFunction(name) {\n    var ff = [];\n    var len = name.length;\n    for (var i = 0; i < len; ++i) ff.push(0);\n    \n    var m = 0;\n    for (var i = 1; i < len; ++i) {\n      while (m > 0 && name[i] != name[m]) m = ff[m - 1];\n      if (name[i] == name[m]) ++m;\n      ff[i] = m;\n    }\n    return ff;\n  }\n  \n  function KMP(H, N, ff) {\n    var m = 0;\n    for (var i = 0; i < H.length; ++i) {\n      while (m > 0 && H[i] != N[m]) m = ff[m - 1];  \n      if (H[i] == N[m]) ++m;\n      if (m == N.length) return true;\n    }\n    return false;\n  }\n  \n  GLOBAL.db.collection(TABLE_NAME.API)\n      .find({user_id: req.user.id})\n      .toArray(function(err, doc) {\n    if (err) {\n      printError(err);\n      return res.redirect('/');\n    }\n    \n    var data = [];\n    var len = doc.length;\n    var ff = getFailureFunction(body.word);\n    for (var i = 0; i < len; ++i) {\n      var name = doc[i].api_name;\n      if (KMP(name, body.word, ff)) data.push(doc[i]);\n    }\n    \n    return res.json({\n      data: dateFormat(data)\n    });\n  });\n});\n\napp.post('/data_init', function(req, res, next) {\n  if (!req.user) return res.redirect('/');\n  GLOBAL.db.collection(TABLE_NAME.API).find({user_id: req.user.id}).toArray(function(err, doc) {\n    if (err) return printError(err);\n    return res.json({\n      data: dateFormat(doc)\n    });\n  }); \n});\n\napp.post('/signup', login.ensureLoggedOut(), function(req, res, next) {\n  if (!req.user) return res.redirect('/');\n  var body = req.body;\n  //email, name, password, confirm\n  if (body.email.length > 50) return res.redirect('/');\n  if (body.user_id.length > 50) return res.redirect('/');\n  if (body.password.length  > 100) return res.redirect('/');\n  GLOBAL.db.collection(TABLE_NAME.USER).findOne({\n    $or:[\n      {email:body.email},\n      {user_id:body.user_id}]}, function(err, doc) {\n    if (err) {\n      return res.json({\n        success: false,\n        message: err\n      });\n    }\n    if (doc) {\n      return res.json({\n        success: false,\n        message: 'already exists'\n      });\n    } else {\n      cryptPassword(body.password, function(err, hash) {\n        if (err) {\n          return res.json({\n            success: false,\n            message: err\n          });\n        } \n        GLOBAL.db.collection(TABLE_NAME.USER).insertOne({\n          user_id: body.user_id,\n          email: body.email,\n          password: hash\n        }, function(err, r) {\n          console.log(err);\n          console.log(r);\n          return res.json({\n            success: true\n          });\n        });\n      });\n    }\n  });\n});\n\nMongoClient.connect(mongoUrl, function(err, db) {\n  if (err) {\n    return printError(err);\n  }\n  console.log('Mongo client connected');\n  GLOBAL.db = db;\n  server.listen(GLOBAL.serverPort, function() {\n    console.log(util.format('Server is running. %s:%d', \n        GLOBAL.serverAddress, GLOBAL.serverPort));\n  });\n});\n","undoManager":{"mark":10,"position":10,"stack":[[{"start":{"row":518,"column":61},"end":{"row":518,"column":62},"action":"insert","lines":["ㅇ"],"id":2452}],[{"start":{"row":509,"column":3},"end":{"row":509,"column":4},"action":"insert","lines":["9"],"id":2453}],[{"start":{"row":509,"column":4},"end":{"row":509,"column":5},"action":"insert","lines":["4"],"id":2454}],[{"start":{"row":509,"column":5},"end":{"row":509,"column":6},"action":"insert","lines":["5"],"id":2455},{"start":{"row":509,"column":6},"end":{"row":509,"column":7},"action":"insert","lines":["6"]}],[{"start":{"row":509,"column":7},"end":{"row":509,"column":8},"action":"insert","lines":["7"],"id":2456},{"start":{"row":509,"column":8},"end":{"row":509,"column":9},"action":"insert","lines":["8"]}],[{"start":{"row":509,"column":9},"end":{"row":509,"column":10},"action":"insert","lines":[","],"id":2457}],[{"start":{"row":509,"column":10},"end":{"row":509,"column":11},"action":"insert","lines":["l"],"id":2458}],[{"start":{"row":509,"column":11},"end":{"row":509,"column":12},"action":"insert","lines":[";"],"id":2459}],[{"start":{"row":518,"column":62},"end":{"row":518,"column":63},"action":"insert","lines":["\\"],"id":2460}],[{"start":{"row":518,"column":62},"end":{"row":518,"column":63},"action":"remove","lines":["\\"],"id":2461}],[{"start":{"row":518,"column":61},"end":{"row":518,"column":62},"action":"remove","lines":["ㅇ"],"id":2462}]]},"ace":{"folds":[],"customSyntax":"javascript","scrolltop":9582.5,"scrollleft":0,"selection":{"start":{"row":611,"column":0},"end":{"row":611,"column":0},"isBackwards":false},"options":{"tabSize":2,"useSoftTabs":true,"guessTabSize":false,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":797,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1478220620943}